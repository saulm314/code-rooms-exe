* {
    box-sizing: border-box;
}

.background-grid {
    --stack-min-width: 130px;
    --stack-max-width: 250px;
    --heap-width: 555px;
    --heap-height: 350px;
    --ide-controls-width: 100px;
    --heap-idecontrols-width: calc(var(--heap-width) + var(--ide-controls-width));

    background-color: rgb(42, 42, 42);
    width: 100vw;
    height: 100vh;
    font-family: "cascadia mono";
    font-size: 16px;
    color: white;
    display: grid;
    grid-template-columns: 100vw;
    grid-template-rows: 100vh;
}

/*
We use a grid here even though a flex should in theory be perfectly sufficient
However, with a flex, the ".stack-container width: max-content" and the
    ".stack-contents-container overflow-x: auto" lines get rendered in the wrong order,
and as a result if the width of the content ends up somewhere between the minimum and maximum stack width values,
then "overflow-x: auto" runs first and it displays a horizontal scrollbar, but then "width: max-content" runs second
and the appropriate width is applied. So even though the content fits within the div, an empty scrollbar is also displayed.
For some reason, using a grid just fixes this. Presumably the rendering happens over multiple passes or something.
*/
.foreground {
    display: grid;
    grid-template-columns: max-content 1fr;
    grid-template-rows: 100%;
}

.stack-container {
    min-width: var(--stack-min-width);
    max-width: var(--stack-max-width);
    width: max-content;
    display: flex;
    flex-direction: column;
}

.stack-label-container {
    height: 20px;
    background-color: rgb(20, 20, 20);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.stack-label {
    font-weight: bold;
}

.stack-contents-scroll-container {
    height: 100%;
    overflow-x: auto;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-gutter: stable both-edges;
    display: flex;
    flex-direction: column;
}

.stack-contents-container {
    padding-top: 10px;
    display: flex;
    flex-direction: column;
    align-items: safe center;
}

.stack-entry {
    padding-bottom: 15px;
    padding-left: 10px;
    padding-right: 10px;
}

.main-grid {
    display: grid;
    grid-template-columns: var(--heap-idecontrols-width) 1fr 1fr;
    grid-template-rows: 1fr var(--heap-height);
}

.text-editor-container {
    grid-column: 1 / 3;
    grid-row: 1;
    background-color: rgb(30, 30, 30);
}

.text-editor {
    all: inherit;
    width: 100%;
    height: 100%;
    padding: 8px;
    scrollbar-width: thin;
    text-wrap-mode: nowrap;
}

.description-container {
    grid-column: 3;
    grid-row: 1;
}

.description {
    all: inherit;
    width: 100%;
    height: 100%;
    padding: 8px;
    scrollbar-width: thin;
    font-family: verdana;
    text-wrap-mode: wrap;
    overflow-wrap: anywhere;
}

.heap-idecontrols-container {
    grid-column: 1;
    grid-row: 2;
}

.output-container {
    grid-column: 2;
    grid-row: 2;
    background-color: black;
}

.output {
    all: inherit;
    width: 100%;
    height: 100%;
    padding: 8px;
    scrollbar-width: thin;
    text-wrap-mode: wrap;
    word-break: break-all;
}

.menu-container {
    grid-column: 3;
    grid-row: 2;
}